import Head from 'next/head'
import React from 'react'
import Link from 'next/link'
import { Amplify, withSSRContext } from 'aws-amplify'
import Map from './map/index'
import EventsSearch from '../src/components/filterEventSearch/filterEventSearch'
import { ModelEventFilterInput } from '../src/API'
import { listEvents, listEventTypes } from '../src/graphql/queries'
import awsExports from '../src/aws-exports'
import { Event, EventTypes } from '../src/models'
import { useRouter } from 'next/router'
import ScrollEvent from '../src/components/scrollEvent'
import CategoriesList from '../src/components/categories/categories'
import EventsNowList from '../src/components/eventsNowList/EventsNowList'

Amplify.configure({ ...awsExports, ssr: true })

interface IHome {
  eventTypesOptions?: Array<EventTypes>
  signOut: () => void
  scrollEvents: Array<Event>
  user: Record<string, any>
  renderedAt: string
  events: Array<Event>
  filters: IFilters
  eventOptions: Array<EventTypes>
}

export interface IFilters {
  startDate: string
  types: string
}

export async function getServerSideProps({ req, query }: any) {
  const SSR = withSSRContext({ req })
  const startDate = new Date(query.startDate)
  const types = query.types
  const filterOptions = {
    ...(query.types && { types: { contains: types } }),
    ...(query.startDate && { startDate: { gt: startDate.toISOString() } }),
  }
  const today = new Date().toISOString()
  console.log(today)
  const filter: ModelEventFilterInput = {
    and: [{ ...filterOptions }],
  }
  const dateFilter: ModelEventFilterInput = {
    and: [
      { startDate: { gt: today } },
      //   trae eventos apartir de ahora
    ],
  }

  try {
    const response = await SSR.API.graphql({
      query: listEvents,
      variables: { filter: dateFilter },
    })
    const responseFilter = await SSR.API.graphql({
      query: listEvents,
      variables: { filter: filter },
    })
    const eventTypeOptions = await SSR.API.graphql({
      query: listEventTypes,
    })
    return {
      props: {
        scrollEvents: response.data.listEvents.items,
        eventOptions: eventTypeOptions.data.listEventTypes.items,
        events: responseFilter.data.listEvents.items,
        filters: filterOptions,
      },
    }
  } catch (err) {
    console.log(err)
    return {
      props: {},
    }
  }
}
function Home({
  events = [],
  scrollEvents = [],
  filters,
  eventOptions,
}: IHome) {
  const router = useRouter()

  const refreshData = ({ startDate, types }: IFilters) => {
    router.push({
      pathname: '/',
      query: { startDate: startDate, types: types },
    })
  }

  const handleChange = (newFilters: Partial<IFilters>) => {
    const prevFilters = router.query
    refreshData({
      ...(prevFilters as unknown as IFilters),
      ...newFilters,
    })
  }

  return (
    <>
      <Head>
        <title>Weeout</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div
        style={{
          display: 'flex',
          flexDirection: 'column',
          alignItems: 'center',
        }}
      >
        <nav className=" p-2 mt-0 w-full z-10 top-0 mb-12 border-b border-gray-300">
          <div className="container mx-auto flex flex-wrap items-center">
            <div className="flex w-full md:w-1/2 justify-center md:justify-start text-white">
              <div className="flex text-2xl pl-2">
                <div className="em em-grinning"></div>
                <div className="text-5xl" style={{ color: 'white' }}>
                  WeeOut
                </div>
              </div>
            </div>
            <div className="flex w-full pt-2 content-center justify-between md:w-1/2 md:justify-end">
              <ul className="list-reset flex justify-between flex-1 md:flex-none items-center pb-2">
                <li className="mr-3">
                  <Link
                    href="/aboutUs"
                    className=" hover:bg-rose-500  text-white   py-2 px-4 border border-transparent hover:text-black  flex items-center justify-center"
                  >
                    Mas sobre nosotros
                  </Link>
                </li>
                <li className="mr-3">
                  <Link
                    href="/profile"
                    className=" hover:bg-rose-500  text-white  py-2 px-4 border border-transparent  hover:text-black  flex items-center justify-center"
                  >
                    Empieza ahora
                  </Link>
                </li>
              </ul>
            </div>
          </div>
        </nav>

        <EventsNowList />

        <div id="medio" className="flex" style={{ alignItems: 'flex-start' }}>
          <div style={{ margin: '0 18px' }}>
            <h2
              className="px-8 text-white   text-xl  p-2 flex justify-center"
              style={{ fontSize: '25px', minWidth: '400px', maxWidth: '960px' }}
            >
              Estos eventos comienzan pronto
            </h2>
            <ScrollEvent />
          </div>
        </div>

        <div style={{ marginTop: '80px' }}>
          <Map events={events} />
        </div>
        
        <CategoriesList />
          <section className="">
            <EventsSearch />
          </section>
      </div>

      <footer className="mb-12 border-t border-gray-900 shadow md:flex md:items-center md:justify-between md:p-6 ">
        <span className="text-lg text-black lg:text-center ">
          Â© 2022. All Rights Reserved.
        </span>
        <ul className="flex flex-wrap items-center mt-3 text-lg text-gray-500 sm:mt-0">
          <li>
            <Link
              href="/aboutUs"
              className=" hover:bg-rose-500  text-black   py-2 px-4 border border-transparent   hover:text-black  flex items-center justify-center"
            >
              Sobre nosotros
            </Link>
          </li>
        </ul>
      </footer>
    </>
  )
}

export default Home
